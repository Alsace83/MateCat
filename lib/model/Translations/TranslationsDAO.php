<?php

/**
 * Created by PhpStorm.
 * User: roberto
 * Date: 24/03/15
 * Time: 13.21
 */
class Translations_TranslationsDAO extends DataAccess_AbstractDao {

    const TABLE = "segment_translations";

    const STRUCT_TYPE = "Translations_TranslationStruct";

    public function read( Translations_TranslationStruct $obj ) {
        parent::read( $obj ); // TODO: Change the autogenerated stub
    }

    /**
     * @param Translations_TranslationStruct $obj
     *
     * @return null|Translations_TranslationStruct|void
     * @throws Exception
     */
    public function update( Translations_TranslationStruct $obj ) {
        $obj = $this->sanitize( $obj );

        $this->_validatePrimaryKey( $obj );

        $set_array        = array();
        $where_conditions = array();
        $query            = "UPDATE " . self::TABLE . " SET %s WHERE %s";

        $where_conditions[ ] = "id_segment = " . (int)$obj->id;
        $where_conditions[ ] = "id_job = " . (int)$obj->uid;

        if ( $obj->split_points_source !== null ) {
            $condition    = "split_points_source = '%s'";
            $set_array[ ] = sprintf( $condition, $obj->split_points_source );
        }

        if ( $obj->split_points_target !== null ) {
            $condition    = "split_points_target = '%s'";
            $set_array[ ] = sprintf( $condition, $obj->split_points_target );
        }

        $set_string   = null;
        $where_string = implode( " AND ", $where_conditions );

        if ( count( $set_array ) ) {
            $set_string = implode( ", ", $set_array );
        }
        else {
            throw new Exception( "Array given is empty. Please set at least one value." );
        }

        $query = sprintf( $query, $set_string, $where_string );

        $this->con->query( $query );

        $this->_checkForErrors();

        if ( $this->con->affected_rows > 0 ) {
            return $obj;
        }

        return null;
    }

    /**
     * @param Translations_TranslationStruct $input
     *
     * @return Translations_TranslationStruct
     * @throws Exception
     */
    public function sanitize( $input ) {
        $con = Database::obtain();
        parent::_sanitizeInput( $input, self::STRUCT_TYPE );

        $input->id_segment          = ( $input->id_segment !== null ) ? $input->id_segment : null;
        $input->id_job              = ( $input->id_job !== null ) ? $input->id_job : null;
        $input->split_points_source = ( $input->split_points_source !== null ) ? $con->escape( json_encode( $input->split_points_source ) ) : '[]';
        $input->split_points_target = ( $input->split_points_target !== null ) ? $con->escape( json_encode( $input->split_points_target ) ) : '[]';

        return $input;
    }


    /**
     * @param Translations_TranslationStruct $obj
     *
     * @return bool|void
     * @throws Exception
     */
    protected function _validatePrimaryKey( Translations_TranslationStruct $obj ) {
        if ( $obj->id_segment === null ) {
            throw new Exception( "ID segment required" );
        }

        if ( $obj->id_job === null ) {
            throw new Exception( "ID job required" );
        }
    }


    /**
     * @param $array_result array
     *
     * @return DataAccess_IDaoStruct|DataAccess_IDaoStruct[]
     */
    protected function _buildResult( $array_result ) {
        $result = array();

        foreach ( $array_result as $item ) {

            $build_arr = array(
                    'id_segment'          => (int)$item[ 'id' ],
                    'id_job'              => $item[ 'name' ],
                    'split_points_source' => $item[ 'type' ],
                    'split_points_target' => $item[ 'description' ],
            );

            $obj = new Translations_TranslationStruct( $build_arr );

            $result[ ] = $obj;
        }

        return $result;
    }


} 