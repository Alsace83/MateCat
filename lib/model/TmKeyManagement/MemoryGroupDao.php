<?php
/**
 * Created by PhpStorm.
 * @author domenico domenico@translated.net / ostico@gmail.com
 * Date: 06/10/14
 * Time: 15.25
 * 
 */

class TmKeyManagement_MemoryGroupDao extends DataAccess_AbstractDao {

    const TABLE = "user_groups";

    const STRUCT_TYPE = "TmKeyManagement_MemoryGroupStruct";

    /**
     * Builds an array with a result set according to the data structure it handles.
     *
     * @param $array_result array A result array obtained by a MySql query
     *
     * @return TmKeyManagement_MemoryGroupStruct[] An array containing TmKeyManagement_MemoryGroupStruct objects
     */
    protected function buildResult( $array_result ) {
        $result = array();

        foreach( $array_result as $item ){

            $build_arr = array(
                    'gid'        => $item[ 'gid' ],
                    'uid'        => $item[ 'uid' ],
                    'group_name' => $item[ 'group_name' ]
            );

            $build_array = new TmKeyManagement_MemoryGroupStruct( $build_arr );

            $result[ ] = $build_array;
        }

        return $result;

    }

    public function create( DataAccess_IDaoStruct $obj ) {
        parent::create( $obj ); // TODO: Change the autogenerated stub
    }

    /**
     * @param TmKeyManagement_MemoryGroupStruct $obj
     *
     * @return TmKeyManagement_MemoryGroupStruct[]|void
     * @throws Exception
     */
    public function read( DataAccess_IDaoStruct $obj ) {

        $obj = $this->sanitize( $obj );

        $where_conditions = array();
        $query            = "SELECT gid, uid, group_name
                             FROM " . self::TABLE . " WHERE %s";

        if ( $obj->uid !== null ) {
            $where_conditions[ ] = "uid = " . $obj->uid;
        }

        if ( $obj->gid !== null ) {
            $where_conditions[ ] = "gid = " . $obj->gid;
        }

        if ( $obj->group_name !== null ) {
            $where_conditions[ ] = "group_name = " . $obj->owner_uid;
        }

        if ( $obj->r !== null ) {
            $condition           = "read_grants = %d";
            $where_conditions[ ] = sprintf( $condition, $obj->r );
        }

        if ( $obj->w !== null ) {
            $condition           = "write_grants = %d";
            $where_conditions[ ] = sprintf( $condition, $obj->w );
        }

        if ( count( $where_conditions ) ) {
            $where_string = implode( " and ", $where_conditions );
        } else {
            throw new Exception( "Where condition needed." );
        }

        $query = sprintf( $query, $where_string );

        $arr_result = $this->con->fetch_array( $query );

        $this->checkForErrors();

        return $this->buildResult( $arr_result );

    }

    public function update( DataAccess_IDaoStruct $obj ) {
        parent::update( $obj ); // TODO: Change the autogenerated stub
    }

    public function delete( DataAccess_IDaoStruct $obj ) {
        parent::delete( $obj ); // TODO: Change the autogenerated stub
    }

    public function createList( Array $obj_arr ) {
        return true;
    }

    public function updateList( Array $obj_arr ) {
        return true;
    }

    public function deleteList( Array $obj_arr ) {
        return true;
    }

} 